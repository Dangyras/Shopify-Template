@use 'sass:math';

@function vw($px-vw, $base-vw: $break--xLarge) {
  @return math.div(($px-vw * 100vw), $base-vw);
}

@function vw2($px-vw, $base-vw: $break--xLarge) {
  @return calc((#{$px-vw} * 100vw) / #{$base-vw});
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@mixin fontSize($size, $line_height) {
  font-size: $size;
  font-size: calculateRem($size);
  line-height: $line_height;
}

@mixin placeholderColour($colour) {
  &::-webkit-input-placeholder {
    color: $colour;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    color: $colour;
    opacity: 1;
  }

  &::placeholder {
    color: $colour;
    opacity: 1;
  }
}

@mixin style--selection() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin style--button($type, $button_bg, $button_tx, $button_bg_hover, $button_tx_hover) {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;

  cursor: pointer;
  text-decoration: none;

  transition: all 250ms ease-in-out;

  @if $type =="button" {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background-color: var(--button-bg, var(--section-button-background, var(--section-content-accent-1, $button_bg)));
    border: 3px solid var(--button-bg, var(--section-button-background, var(--section-content-accent-1, $button_bg)));
    font-family: $font-primary;
    color: var(--section-button-text, $button_tx);

    padding: 0.5735em 1.454em;
    border-radius: 6.67em;

    font-size: 1.5rem;
    line-height: 1;
    font-weight: 500;
    text-align: center;
    text-transform: uppercase;

    font-size: 1.6rem;
    font-weight: 600;
    letter-spacing: normal;

    &:hover {
      border-color: var(--button-bg, var(--section-button-background, var(--section-content-accent-1, $button_bg_hover)));
      background-color: var(--button-bg, var(--section-button-background, var(--section-content-accent-1, $button_bg_hover)));
      color: var(--section-button-text, $button_tx_hover);
    }

    &:before,
    &:after {
      content: none;
    }

    @media screen and (max-width: $break--small) {
      border-width: 2px;
    }
  }

  @if $type =="border" {
    display: inline-flex;
    align-items: center;
    gap: 10px;

    background-color: $button_bg;
    border: 3px solid $button_tx;
    font-family: $font--primary;
    color: $button_tx;

    padding: 0.5735em 1.454em;
    border-radius: 6.67em;

    font-size: 1.5rem;
    line-height: 1;
    font-weight: 500;
    text-align: center;
    text-transform: uppercase;

    svg {
      height: 0.5em;
      width: auto;
    }

    &:hover {
      border-color: $button_tx_hover;
      background-color: $button_bg_hover;
      color: $button_tx_hover;
    }

    &:before,
    &:after {
      content: none;
    }

    @media screen and (max-width: $break--small) {
      border-width: 2px;
    }
  }

  @if $type =="reset" {
    border: none;
    background: none;
    padding: 0;
    color: inherit;
  }

  @if $type =="loading" {
    position: relative;
    font-size: 0 !important;

    .loader {
      display: inline-block;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      margin: auto;
      width: 2em;
      height: 2em;
      font-size: 1.2rem;

      &:after {
        content: " ";
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid $button_tx;
        border-color: $button_tx transparent $button_tx transparent;
        animation: loading 1.2s linear infinite;

        width: 1.9em;
        height: 1.9em;
        border-width: 0.2em;
        margin: 0;
      }
    }

    &:before {
      content: "";
    }
  }

  &[disabled] {
    opacity: .5;
  }

  .caret2 {
    height: 0.5em;
    width: auto;
  }

  &:focus,
  &:active {
    outline: none;
  }
}

@mixin style--shadow($depth) {
  @if $depth ==1 {
    -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);
  }

  @if $depth ==2 {
    -webkit-box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
    box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
  }

  @if $depth ==3 {
    -webkit-box-shadow: 0 8px 17px 2px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2);
    box-shadow: 0 8px 17px 2px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2);
  }
}

@mixin grid--flex($padding) {
  overflow: hidden;

  >.flex--wrapper {
    display: flex;
    flex-wrap: wrap;
    margin: calc(-1 * #{$padding});

    >.flex--item {
      flex: 1;
      padding: $padding;
    }
  }

  @media screen and (max-width: $break--small) {
    >.flex--wrapper {
      margin: calc(-1 * #{$padding} / #{$grid-modifier-small});

      >.flex--item {
        padding: calc(#{$padding} / #{$grid-modifier-small});
        flex: 100%;
      }
    }
  }

  @media screen and (max-width: $break--tiny) {
    >.flex--wrapper {
      margin: calc(-1 * #{$padding} / #{$grid-modifier-tiny});

      >.flex--item {
        padding: calc(#{$padding} / #{$grid-modifier-tiny});
      }
    }
  }
}

@mixin container($max-width, $padding) {
  width: unset;
  margin: auto;
  padding-left: $padding;
  padding-right: $padding;
  max-width: calc(#{$max-width} + 2 * #{$padding});

  @media screen and (max-width: $max-width) {

    &.mobile--switch {
      padding: 0;

      .inner--container {
        padding-left: $padding;
        padding-right: $padding;
      }
    }
  }

  @media screen and (max-width: $break--small) {
    padding-left: $container-padding-small;
    padding-right: $container-padding-small;

    &.mobile--switch {
      padding: 0;

      .inner--container {
        padding-left: $container-padding-small;
        padding-right: $container-padding-small;
      }
    }
  }

  @media screen and (max-width: $break--tiny) {
    padding-left: $container-padding-tiny;
    padding-right: $container-padding-tiny;

    &.mobile--switch {
      padding: 0;

      .inner--container {
        padding-left: $container-padding-tiny;
        padding-right: $container-padding-tiny;
      }
    }
  }
}